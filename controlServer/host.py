from flask import Flask
from flask import jsonify
from flask import request
from flask_cors import CORS
import os
import threading

TRIGGER_ANALYZE_AFTER = 2

app = Flask(__name__)
CORS(app)

commands = {}
logs = {}
last_seen_count = {}


#TODO: change env variable PRIMARY_VM when your clone isn't killed by malware

@app.route('/fork_vm', methods=['POST'])
def fork_vm():
    fork_data = request.get_json()
    ip_addr = request.remote_addr
    command = fork_data.get('command', None)

    print(fork_data)

    if ip_addr is None or command is None:
        return jsonify({'success': False})

    # write cloning stuff here
    os.system("sh /home/alok/foolMalware/createClone")
    new_ip_addr = open("export_ip", "r").read().strip()
    #os.system("source $PWD/export_ip")
    #new_ip_addr = os.environ["CLONED_VM_IP"]
    commands[new_ip_addr] = fork_data
    return jsonify({})


@app.route('/get_command', methods=['GET'])
def get_command():
    ip_addr = request.args.get('ip_addr', None)
    command = commands.get(ip_addr, None)

    if ip_addr is None or command is None:
        return jsonify({'success': False})

    del commands[ip_addr]
    return command

def analyze(batch_data):
    print('analyzing', batch_data)
    pass
    
    # do fancy shit here

@app.route('/log', methods=['POST'])
def log():
    data = request.get_json()
    ip_addr = request.remote_addr

    if ip_addr not in logs:
        logs[ip_addr] = []
        last_seen_count[ip_addr] = 0

    logs[ip_addr].append(data)

    if len(logs[ip_addr]) - last_seen_count[ip_addr] >= TRIGGER_ANALYZE_AFTER:
        batch_data = {}
        for ip in logs.keys():
            batch_data[ip] = logs[ip][last_seen_count[ip]:]
            last_seen_count[ip] = len(logs[ip])

        thread = threading.Thread(target=analyze, args=(batch_data, ))
        thread.start()

    return jsonify({'success': True})

app.run(host='0.0.0.0', port=8000, threaded=True, debug=True)
