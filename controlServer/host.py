from flask import Flask
from flask import jsonify
from flask import request
from flask_cors import CORS
import os
import threading
from paramiko import SSHClient, AuthenticationException, AutoAddPolicy
import time

# TRIGGER_ANALYZE_AFTER = 2
HIGH_READING_TRIGGER = 1.3

app = Flask(__name__)
CORS(app)

commands = {}
# logs = {}
olog = None
clog = None


origin_updated = False
clone_updated = False

# log_updates = {}
# last_seen_count = {}
#
status = {
    'clone_ip': None,
    'high_cpu': False,
    'high_mem': False,
    'high_disk': False,
    'high_network': False,
    'ssh_access': True,
    'new_users_added': False,
    'new_ports_opened': False
}

def threshold_status_setter(log_key, status_key):
    global clog, olog
    if olog[log_key] != 0:
        status[status_key] = clog[log_key] / olog[log_key] >= HIGH_READING_TRIGGER

def compare_status_setter(log_key, status_key):
    global clog, olog
    status[status_key] = clog[log_key] != olog[log_key]

def analyze():
    threshold_status_setter('cpu', 'high_cpu')
    threshold_status_setter('mem', 'high_mem')
    threshold_status_setter('net', 'high_network')
    threshold_status_setter('disk', 'high_disk')

    compare_status_setter('users', 'new_users_added')
    compare_status_setter('ports', 'new_ports_opened')

def get_clone_ip():
    try:
        new_ip_addr = open("export_ip", "r").read().strip().split("/")[0]
        if is_ssh_server_up(new_ip_addr):
           return new_ip_addr
        else:
            print('clone is dead')
            open('export_ip', 'w').close()
            return None
     
    except:
        return None

@app.route('/fork_vm', methods=['POST'])
def fork_vm():

    fork_data = request.get_json()
    print(fork_data)
    ip_addr = request.remote_addr
    command = fork_data.get('command', None)

    if ip_addr is None or command is None:
        return jsonify({'success': False})

    # write cloning stuff here
    os.system("sh /home/alok/foolMalware/createClone")
    new_ip_addr = get_clone_ip()

    status['clone_ip'] = new_ip_addr
    commands[new_ip_addr] = fork_data

    return jsonify({"status": "cloned successfully!"})


@app.route('/get_command', methods=['GET'])
def get_command():
    ip_addr = request.args.get('ip_addr', None)
    command = commands.get(ip_addr, None)

    if ip_addr is None or command is None:
        return jsonify({'success': False})

    del commands[ip_addr]
    return command


@app.route('/log', methods=['POST'])
def log():
    global clog, olog, clone_updated, origin_updated
    data = request.get_json()
    ip_addr = request.remote_addr
    if status['clone_ip'] is None:
        return jsonify({'success': True})

    if ip_addr == status['clone_ip']:
        clog = data
        clone_updated = True
    else:
        olog = data
        origin_updated = True

    if origin_updated and clone_updated:
        origin_updated = False
        clone_updated = False
        analyze()

    return jsonify({'success': True})



# @app.route('/log', methods=['POST'])
# def log():
#     data = request.get_json()
#     ip_addr = request.remote_addr

#     if ip_addr not in logs:
#         logs[ip_addr] = []
#         last_seen_count[ip_addr] = 0

#     logs[ip_addr].append(data)

#     if len(logs[ip_addr]) - last_seen_count[ip_addr] >= TRIGGER_ANALYZE_AFTER:
#         batch_data = {}
#         for ip in logs.keys():
#             batch_data[ip] = logs[ip][last_seen_count[ip]:]
#             last_seen_count[ip] = len(logs[ip])

#         thread = threading.Thread(target=analyze, args=(batch_data, ))
#         thread.start()

#     return jsonify({'success': True})


@app.route('/status', methods=['GET'])
def get_status():
    return jsonify(status)


def is_ssh_server_up(ip):
    try:
        ssh = SSHClient()
        ssh.set_missing_host_key_policy(AutoAddPolicy())
        ssh.connect(ip, username='__fakeuser__qwertyuiop__0123456789__')
    except AuthenticationException as e:
        return True
    except Exception as e:
        print(e)
        return False


def monitor_ssh():
    while True:
        time.sleep(5)

        if status['clone_ip'] is None:
            continue

        status['ssh_access'] = is_ssh_server_up(status['clone_ip'])


def main():
    status['clone_ip'] = get_clone_ip()
    app.run(host='0.0.0.0', port=8000, threaded=True, debug=True)
    thread = threading.Thread(target=monitor_ssh)
    thread.start()

if __name__ == '__main__':
    main()
